{"version":3,"sources":["ng://ngx-tbl/ngx-tbl-column.component.ts","ng://ngx-tbl/ngx-tbl-component.ts","ng://ngx-tbl/ngx-tbl-control.ts","ng://ngx-tbl/ngx-tbl-pagination/ngx-tbl-pagination.ts","ng://ngx-tbl/ngx-tbl.module.ts"],"names":["NgxTblColumn","Directive","args","selector","Input","ContentChild","NgxTblComponent","_this","this","Subject","EventEmitter","resetPagination","subject","asObservable","debouncer","pipe","debounceTime","map","val","loadData","prototype","_items","items","ngOnInit","ngAfterViewInit","next","search","limitChange","confirmDelete","item","deleteRow","deleteConfirmModal","show","deleteItem","delete","emit","_.clone","tableParams","getQueryParams","hide","closeModal","editRow","index","edit","addNew","add","currentPage","searchParam","limit","skip","sort","load","sortColumn","column","sortable","_.get","key","Component","templateUrl","ViewChild","Output","ContentChildren","NgxTblControl","container","name","validation","renderer","el","form","removeControl","get","addControl","FormControl","ControlContainer","Attribute","Renderer2","ElementRef","NgxTblPagination","setPage","page","pager","totalPages","pageChanged","getPager","total","_.toNumber","subscribe","reset","ngOnChanges","changes","parseInt","totalItems","pageSize","startPage","endPage","Math","ceil","startIndex","endIndex","min","pages","_.range","endCount","changeDetection","ChangeDetectionStrategy","OnPush","styles","template","NgxTblModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Directive, Input, ContentChild } from '@angular/core';\n\n@Directive({\n  selector: 'ngx-tbl-column'\n})\n\nexport class NgxTblColumn {\n  @Input() name: string;\n  @Input() key: string;\n  @Input() sortable: string;\n  @Input() narrow: boolean;\n\n  @ContentChild('ngxTblCellTemplate') cellTemplate: any;\n}","import { Component, ViewChild, Input, \n  Output, EventEmitter, ContentChildren, QueryList } from '@angular/core'\nimport { Subject } from 'rxjs/Subject'\nimport { Observable } from 'rxjs/Observable';\nimport { NgxTblColumn } from './ngx-tbl-column.component';\nimport { debounceTime, map } from 'rxjs/operators'\n\nimport * as _ from 'lodash';\nexport interface itm {\n  rows?: any[];\n  total: number;\n}\n@Component({\n  selector: 'ngx-tbl', \n  templateUrl: './ngx-tbl-component.html'\n})\nexport class NgxTblComponent {\n  _items: any;\n  limit: number = 10;\n  sort: any = {};\n  searchParam: string;\n  private subject = new Subject<any>();\n  resetPagination: Observable<any>;\n  private debouncer = new Subject();\n  private deleteRow:any;\n\n  @ViewChild('deleteConfirmModal') deleteConfirmModal: any;\n  @Input()\n  set items(items: any[]) {\n    this._items = items;\n  }\n  get items() {\n    return this._items;\n  }\n  @Input() config: any;\n  @Output() update: EventEmitter<any> = new EventEmitter<any>();\n  @Output() load: EventEmitter<any> = new EventEmitter<any>();\n  @Output() edit: EventEmitter<any> = new EventEmitter();\n  @Output() add: EventEmitter<any> = new EventEmitter();\n  @Output() delete: EventEmitter<any> = new EventEmitter();\n  @ContentChildren(NgxTblColumn) columns: QueryList<NgxTblColumn>;\n\n  constructor() {\n    this.resetPagination = this.subject.asObservable();\n    this.debouncer.pipe(\n      debounceTime(300),\n      map(val => this.loadData()))\n  }\n\n  ngOnInit() {\n    this.loadData();\n  }\n\n  ngAfterViewInit() {\n    this.subject.next(true);\n  }\n\n  search() {\n    this.subject.next(true);\n    this.debouncer.next()\n  }\n\n  limitChange() {\n    this.subject.next(true);\n    this.loadData();\n  }\n\n  confirmDelete(item: any) {\n    this.deleteRow = item;\n    this.deleteConfirmModal.show();\n  }\n\n  deleteItem() {\n    this.delete.emit({ item: _.clone(this.deleteRow), tableParams: this.getQueryParams(1) });\n    this.deleteRow = {};\n    this.deleteConfirmModal.hide();\n    this.subject.next(true);\n  }\n\n  closeModal() {\n    this.deleteConfirmModal.hide();\n  }\n\n  editRow(item: any, index: any) {\n    this.edit.emit({ item: _.clone(item), tableParams: this.getQueryParams(1) });\n    this.subject.next(true);\n  }\n\n  addNew() {\n    this.add.emit({ tableParams: this.getQueryParams(1) });\n    this.subject.next(true);\n  }\n\n  getQueryParams(currentPage: any) {\n    //this.pageNo = currentPage;\n    return { search: this.searchParam || '', limit: this.limit, skip: (currentPage - 1) * this.limit, sort: this.sort };\n  }\n\n  loadData(currentPage: number = 1) {\n    this.load.emit(this.getQueryParams(currentPage));\n  }\n\n  sortColumn(column: any) {\n    if (column.sortable) {\n      if (_.get(this.sort, column.key) == 0) {\n        this.sort = {};\n        this.sort[column.key] = 1\n      } else if (_.get(this.sort, column.key) == 1) {\n        this.sort = {};\n        this.sort[column.key] = 0;\n      } else {\n        this.sort = {};\n        this.sort[column.key] = 1;\n      }\n      this.loadData(); //this.pageNo\n    }\n  }\n}","import { Directive, Output, Input, ElementRef, Renderer2,\n  Attribute } from '@angular/core';\n import { FormControl, ControlContainer, \n   FormGroupDirective, Validators } from '@angular/forms';\n \n @Directive({\n   selector: '[formControlName][ngx-tbl-control]',\n })\n \n export class NgxTblControl {\n   @Input('validators') validators: any;\n   private form: any;\n   constructor(private container: ControlContainer, @Attribute('formControlName') private name: any, \n   @Attribute('validation') validation: any, private renderer: Renderer2, private el: ElementRef) {\n     this.form = (this.container as FormGroupDirective).form;\n     this.form.removeControl(this.name);\n     if (!this.form.get(this.name)) {\n       this.form.addControl(this.name, new FormControl(''));\n     }\n   }\n }","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy\n} from '@angular/core';\n\nimport { tap } from 'rxjs/operators';\n\nimport * as _ from 'lodash';\ndeclare var parseInt: any\ndeclare var Math: any\n@Component({\n  selector: 'ngx-tbl-pagination',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  styles: [`\n    .pagination { float: right; margin:0 0 7px 0; }\n    .pagination li{cursor:pointer;}\n    .paging-info {font-style: italic;color: #808080;line-height: 2;}\n  `],\n  template: `\n  <div class=\"col-md-3 col-xs-3 col-lg-3 col-sm-3 paging-info\" *ngIf=\"total\">\n    <span>showing {{this.pager.startIndex+1}} to {{this.pager.endCount}} of {{total}}</span>\n  </div>\n  <div class=\"col-md-9 col-xs-9 col-lg-9 col-sm-9\">\n  <ul *ngIf=\"pager.pages && pager.pages.length\" class=\"pagination\">\n    <li [ngClass]=\"{disabled:pager.currentPage === 1}\">\n        <a (click)=\"setPage(1)\">First</a>\n    </li>\n    <li [ngClass]=\"{disabled:pager.currentPage === 1}\">\n        <a (click)=\"setPage(pager.currentPage - 1)\">Prev</a>\n    </li>\n    <li *ngFor=\"let page of pager.pages\" [ngClass]=\"{active:pager.currentPage === page}\">\n        <a (click)=\"setPage(page)\">{{page}}</a>\n    </li>\n    <li [ngClass]=\"{disabled:pager.currentPage === pager.totalPages}\">\n        <a (click)=\"setPage(pager.currentPage + 1)\">Next</a>\n    </li>\n    <li [ngClass]=\"{disabled:pager.currentPage === pager.totalPages}\">\n        <a (click)=\"setPage(pager.totalPages)\">Last</a>\n    </li>\n  </ul>\n  </div>\n  `\n})\n\nexport class NgxTblPagination {\n  @Input('reset-pagination') resetPagination: any;\n  @Input('total') total: any;\n  @Input() limit: any;\n  @Output('page-change') pageChanged = new EventEmitter();\n  private reset: boolean = true;\n  pager: any = {};\n\n  setPage(page: number) {\n    if (page < 1 || page > this.pager.totalPages) {\n      return;\n    }\n    this.pageChanged.emit(page);\n    this.pager = this.getPager(this.total, page, _.toNumber(this.limit));\n  }\n  \n  constructor() {\n  }\n\n  ngOnInit() {\n    this.resetPagination.subscribe(() => {\n      this.reset = true;\n    })\n  }\n\n  ngOnChanges(changes: any) {\n    this.limit = parseInt(this.limit);\n    if (this.total >= 0 && this.reset) {\n      this.reset = false;\n      this.pager = this.getPager(this.total, 1, _.toNumber(this.limit));\n    }\n  }\n\n  getPager(totalItems: number, currentPage: number = 1, pageSize: number = 10) {\n    let totalPages = Math.ceil(totalItems / pageSize);\n    let startPage: number, endPage: number;\n    if (totalPages <= 10) {\n      startPage = 1;\n      endPage = totalPages;\n    } else {\n      if (currentPage <= 6) {\n        startPage = 1;\n        endPage = 10;\n      } else if (currentPage + 4 >= totalPages) {\n        startPage = totalPages - 9;\n        endPage = totalPages;\n      } else {\n        startPage = currentPage - 5;\n        endPage = currentPage + 4;\n      }\n    }\n\n    let startIndex = (currentPage - 1) * pageSize;\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n\n    let pages = _.range(startPage, endPage + 1);\n\n    let endCount = startIndex + this.limit;\n    if (endCount > this.total) { endCount = this.total }\n    return {\n      totalItems: totalItems,\n      currentPage: currentPage,\n      pageSize: pageSize,\n      totalPages: totalPages,\n      startPage: startPage,\n      endPage: endPage,\n      startIndex: startIndex,\n      endIndex: endIndex,\n      pages: pages,\n      endCount: endCount\n    };\n  }\n}","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\n\n\nimport { NgxTblComponent } from './ngx-tbl-component';\nimport { NgxTblColumn } from './ngx-tbl-column.component';\nimport { NgxTblControl } from './ngx-tbl-control';\nimport { NgxTblPagination } from './ngx-tbl-pagination/ngx-tbl-pagination';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    NgxTblComponent,\n    NgxTblColumn,\n    NgxTblControl,\n    NgxTblPagination\n  ],\n  exports: [ \n    NgxTblComponent,\n    NgxTblColumn,\n    NgxTblControl\n  ]\n})\n\nexport class NgxTblModule {\n  \n}"]}